/*
 [ GROUP BY ] 즐겨찾기가 가장 많은 식당 정보 출력하기 (Lv3)

 [문제 설명]
 다음은 식당의 정보를 담은 REST_INFO 테이블입니다.
 REST_INFO 테이블은 다음과 같으며 REST_ID, REST_NAME, FOOD_TYPE, VIEWS, FAVORITES, PARKING_LOT, ADDRESS, TEL은
 식당 ID, 식당 이름, 음식 종류, 조회수, 즐겨찾기수, 주차장 유무, 주소, 전화번호를 의미합니다.

 [문제]
 REST_INFO 테이블에서 음식종류별로 즐겨찾기수가 가장 많은 식당의 음식 종류, ID, 식당 이름, 즐겨찾기수를 조회하는 SQL 문을 작성해주세요.
 이때 결과는 음식 종류를 기준으로 내림차순 정렬해주세요.
 */


-- 조회) 음식 종류, ID, 식당 이름, 즐겨찾기수
SELECT FOOD_TYPE,
       REST_ID,
       REST_NAME,
       FAVORITES
FROM (
-- 각 행에 그룹별 순위 부여
-- 조건) 음식종류별로 즐겨찾기 수가 가장 많은 식당
         SELECT FOOD_TYPE,
                REST_ID,
                REST_NAME,
                FAVORITES,
-- 특정 그룹 안에서 순위 매김 (동률은 다른 순번 부여)
                ROW_NUMBER() OVER(
-- 음식 종류별 그룹화
               PARTITION BY FOOD_TYPE
-- 각 그룹 안에서 즐겨찾기 많은 순으로 정렬 (내림차순)
               ORDER BY FAVORITES DESC)
-- ROW_NUMBER() 결과 컬럼에 rn 이라는 이름 붙임
-- 1순위: rn = 1   ,  2순위: rn = 2  ....
           AS rn
         FROM REST_INFO
-- 서브쿼리는 가상의 테이블로 취급하므로 반드시 이름 필요
-- t(별칭) 없으면 오류 발생
     ) t
-- 각 그룹에서 1순위만 추출
WHERE rn = 1
-- 정렬) 음식 종류 기준으로 내림차순
ORDER BY FOOD_TYPE DESC;


/*

      [ SQL 실행 순서 ]

    1. FROM         : 테이블 불러오기

    2. WHERE        : 조건 필터링

    3. GROUP BY

    4. HAVING

    5. SELECT       : 컬럼 선택 + 함수 계산

    6. ORDER BY     : 정렬


-----------------------------------------------------------------------------

      [ 순위 함수 (ROW_NUMBER) 특징 ]

    - ROW_NUMBER() OVER(...)  : 윈도우 함수  → SELECT 단계에서 계산

    - rn = ROW_NUMBER()..         : SELECT 절에서야 만들어지는 가상 컬럼

    - WHERE rn = 1 같은 조건을 같은 단계에서 걸 수 x

        => WHERE 는 SELECT 보다 먼저 실행되기 때문!!
        => SQL 입장에서는 아직 rn 값 존재x


-----------------------------------------------------------------------------

      [ 왜? 서브쿼리를 작성해야 하는지 ]

    - 안쪽 SELECT
        → ROW_NUMBER() 계산 => rn 이라는 컬럼 만듬

    - 바깥 SELECT
        → WHERE rn = 1 조건 걸 수 있음!
          ( rn이 실제 컬럼처럼 존재하므로)


-----------------------------------------------------------------------------

      [ ROW_NUMBER() ]

    - 윈도우 함수 중 하나

    - OVER(PARTITION BY ... ORDER BY ...) 구문 이용
         → 특정 그룹 안에서 순위 매김

    - 각 그룹에서 순위를 매기며, 동률은 다른 순번 부여

-----------------------------------------------------------------------------

      [ 왜? t 같은 별칭 필요한 이유? ]

    - 서브쿼리 → 이 서브쿼리 결과를 가상의 테이블로 취급
         => 가상의 테이블은 반드시 이름 필요!!

    - 바깥 SELECT 에서 이 결과 참조 시,
      어떤 이름으로 불러올지 명시 필요!

    - 명시 안해주면??
         => 오류 발생!!
 */

